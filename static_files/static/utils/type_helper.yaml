---
file_description: "TODO."
tvl_include_guard: "TUD_D2RG_TVL_STATIC_UTILS_TYPE_HELPER_HPP"
includes:
   - '<cstddef>'
   - '<type_traits>'
   - '<typeinfo>'
   - '<cxxabi.h>'
   - '<memory>'
   - '<string>'
   - '<cstdlib>'
   - '<limits>'
implementations:
   - >
      template< class T >
         std::string type_name( ) {
            typedef typename std::remove_reference< T >::type TR;
            std::unique_ptr< char, void ( * )( void * ) > own (
               abi::__cxa_demangle( typeid( TR ).name( ), nullptr,nullptr, nullptr ),
               std::free
            );
            std::string r = own != nullptr ? own.get( ) : typeid( TR ).name( );
            if( std::is_const< TR >::value ) {
               r += " const";
            }
            if( std::is_volatile< TR >::value ) {
               r += " volatile";
               }
            if( std::is_lvalue_reference< T >::value ) {
               r += "&";
            } else if( std::is_rvalue_reference< T >::value ) {
               r += "&&";
            }
            return r;
         }
         #define TYPENAME( x ) type_name< decltype( x ) >( )

   - >
      template< typename T >
         struct is_tuple_impl : std::false_type { };   
         template< typename... Ts >
         struct is_tuple_impl< std::tuple< Ts... > > : std::true_type { };
         template< typename T >
         struct is_tuple : is_tuple_impl< std::remove_cv_t< T > > { };
...